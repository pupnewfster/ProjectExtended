import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            name "forge"
            url 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'java'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'

idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += 'src/datagen/generated'
            //There is no need to pack the Data Generator cache into the build
            exclude '.cache'
        }
    }
    datagen {
        java.srcDirs = ['src/datagen/java']
        resources.srcDirs = ['src/datagen/resources']
        compileClasspath += project.sourceSets.main.output
    }
}

configurations {
    //Let the datagen source set know about forge
    datagenCompile.extendsFrom(compile)
}

group = 'gg.galaxygaming.projectextended'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = 'ProjectExtended'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory file('run')

            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                projectextended {
                    source(sourceSets.main)
                }
            }
        }

        server {
            workingDirectory file('run')
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                projectextended {
                    source(sourceSets.main)
                }
            }
        }

        data {
            workingDirectory file('run')
            environment 'target', 'fmluserdevdata'
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            args '--mod', 'projectextended', '--all', '--output', file('src/datagen/generated/'),
                    '--existing', file('src/main/resources/'), '--existing-mod', 'projecte'
            mods {
                projectextended {
                    sources((SourceSet[]) [sourceSets.main, sourceSets.datagen])
                }
            }
        }
    }
}

repositories {
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //compile fg.deobf("curse.maven:projecte:${projecte_fileid}")
    compile fg.deobf("projecte:projecte:1.0.4:universal")
    //Include JEI in the dev environment
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")
}

jar {
    manifest.attributes([
            "Specification-Title"     : "ProjectExtended",
            "Specification-Vendor"    : "pupnewfster",
            "Specification-Version"   : "${mod_version}",
            "Implementation-Title"    : "ProjectExtended",
            "Implementation-Version"  : "${mod_version}",
            "Implementation-Vendor"   : "pupnewfster",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}

task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand "version": mod_version, "mc_version": minecraft_version_range, "forge_version": forge_version_range,
                "loader_version": loader_version_range, "projecte_version": projecte_version_range
    }
    into "$buildDir/resources/main/"
}

def jsonPatterns = ["**/*.json", "**/*.mcmeta"]

processResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
    //Minify json resources
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}